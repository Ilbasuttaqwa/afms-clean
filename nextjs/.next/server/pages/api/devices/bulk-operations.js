"use strict";(()=>{var e={};e.id=3670,e.ids=[3670],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,s)=>{Object.defineProperty(s,"l",{enumerable:!0,get:function(){return function e(s,t){return t in s?s[t]:"then"in s&&"function"==typeof s.then?s.then(s=>e(s,t)):"function"==typeof s&&"default"===t?s:void 0}}})},9111:(e,s,t)=>{t.r(s),t.d(s,{config:()=>h,default:()=>_,routeModule:()=>g});var a={};t.r(a),t.d(a,{default:()=>v});var i=t(1802),n=t(7153),r=t(6249),c=t(3524);!function(){var e=Error("Cannot find module '../../../lib/auth-middleware'");throw e.code="MODULE_NOT_FOUND",e}();let u=new c.PrismaClient;async function d(e,s){try{if("POST"===e.method){let{action:t}=e.body;switch(t){case"bulk_sync":return await o(e,s);case"bulk_update":return await l(e,s);case"bulk_test":return await f(e,s);case"bulk_restart":return await m(e,s);default:return s.status(400).json({success:!1,message:"Invalid action. Supported actions: bulk_sync, bulk_update, bulk_test, bulk_restart"})}}return s.status(405).json({success:!1,message:"Method not allowed"})}catch(e){return s.status(500).json({success:!1,message:"Internal server error"})}finally{await u.$disconnect()}}async function o(e,s){let{device_ids:t}=e.body;if(!t||!Array.isArray(t)||0===t.length)return s.status(400).json({success:!1,message:"device_ids array is required"});let a=[];for(let e of t)try{let s=await u.device.findFirst({where:{device_id:e},include:{cabang:!0}});if(!s){a.push({device_id:e,success:!1,message:"Device not found"});continue}await new Promise(e=>setTimeout(e,1e3+2e3*Math.random()));let t=await u.device.update({where:{id:s.id},data:{last_sync:new Date,status:"aktif"}});await u.deviceStatusLog.create({data:{device_id:s.id,status:"online",firmware_version:s.firmware_version,storage_usage:Math.floor(40*Math.random())+30,timestamp:new Date}}),a.push({device_id:e,success:!0,message:"Sync completed successfully",last_sync:t.last_sync})}catch(s){a.push({device_id:e,success:!1,message:s.message||"Sync failed"})}return s.status(200).json({success:!0,message:`Bulk sync completed for ${a.filter(e=>e.success).length}/${t.length} devices`,data:a})}async function l(e,s){let{device_ids:t,updates:a}=e.body;if(!t||!Array.isArray(t)||0===t.length)return s.status(400).json({success:!1,message:"device_ids array is required"});if(!a||0===Object.keys(a).length)return s.status(400).json({success:!1,message:"updates object is required"});let i=[];for(let e of t)try{let s=await u.device.findFirst({where:{device_id:e}});if(!s){i.push({device_id:e,success:!1,message:"Device not found"});continue}await u.device.update({where:{id:s.id},data:{...a,updated_at:new Date}}),i.push({device_id:e,success:!0,message:"Device updated successfully"})}catch(s){i.push({device_id:e,success:!1,message:s.message||"Update failed"})}return s.status(200).json({success:!0,message:`Bulk update completed for ${i.filter(e=>e.success).length}/${t.length} devices`,data:i})}async function f(e,s){let{device_ids:t}=e.body;if(!t||!Array.isArray(t)||0===t.length)return s.status(400).json({success:!1,message:"device_ids array is required"});let a=[];for(let e of t)try{let s=await u.device.findFirst({where:{device_id:e},include:{cabang:!0}});if(!s){a.push({device_id:e,success:!1,message:"Device not found",connection_status:"unknown"});continue}await new Promise(e=>setTimeout(e,500+1500*Math.random()));let t=Math.random()>.2,i=Math.floor(200*Math.random())+50;await u.device.update({where:{id:s.id},data:{status:t?"aktif":"nonaktif",last_sync:t?new Date:s.last_sync}}),await u.deviceStatusLog.create({data:{device_id:s.id,status:t?"online":"offline",firmware_version:s.firmware_version,error_message:t?null:"Connection timeout",timestamp:new Date}}),a.push({device_id:e,success:t,message:t?"Connection test successful":"Connection test failed",connection_status:t?"online":"offline",response_time:t?i:null})}catch(s){a.push({device_id:e,success:!1,message:s.message||"Test failed",connection_status:"error"})}return s.status(200).json({success:!0,message:`Connection test completed for ${t.length} devices`,data:a})}async function m(e,s){let{device_ids:t}=e.body;if(!t||!Array.isArray(t)||0===t.length)return s.status(400).json({success:!1,message:"device_ids array is required"});let a=[];for(let e of t)try{let s=await u.device.findFirst({where:{device_id:e}});if(!s){a.push({device_id:e,success:!1,message:"Device not found"});continue}await new Promise(e=>setTimeout(e,2e3+3e3*Math.random())),await u.device.update({where:{id:s.id},data:{status:"aktif",last_sync:new Date}}),await u.deviceStatusLog.create({data:{device_id:s.id,status:"online",firmware_version:s.firmware_version,error_message:"Device restarted successfully",timestamp:new Date}}),a.push({device_id:e,success:!0,message:"Device restarted successfully"})}catch(s){a.push({device_id:e,success:!1,message:s.message||"Restart failed"})}return s.status(200).json({success:!0,message:`Bulk restart completed for ${a.filter(e=>e.success).length}/${t.length} devices`,data:a})}let v=Object(function(){var e=Error("Cannot find module '../../../lib/auth-middleware'");throw e.code="MODULE_NOT_FOUND",e}())(d),_=(0,r.l)(a,"default"),h=(0,r.l)(a,"config"),g=new i.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/devices/bulk-operations",pathname:"/api/devices/bulk-operations",bundlePath:"",filename:""},userland:a})},7153:(e,s)=>{var t;Object.defineProperty(s,"x",{enumerable:!0,get:function(){return t}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(t||(t={}))},1802:(e,s,t)=>{e.exports=t(145)}};var s=require("../../../webpack-api-runtime.js");s.C(e);var t=s(s.s=9111);module.exports=t})();